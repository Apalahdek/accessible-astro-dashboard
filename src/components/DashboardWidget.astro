---
const {
  title = 'Requests', // Default title
  type = 'success',   // Default type (success/error)
  keyType = 'remainingRequests' // Pilihan: 'remainingRequests' atau 'maxRequests'
} = Astro.props
---

<div class="dashboard-widget radius-large space-24 elevation-400 space-content type-${type}">
  <p class="size-48">
    <strong id="request-value">Loading...</strong>
  </p>
  <p class="size-20">
    <em>{title}</em>
  </p>
</div>

<script>
  // Pilihan keyType ('remainingRequests' atau 'maxRequests')
  const keyType = '{keyType}';

  // Mengambil elemen DOM tempat data akan ditampilkan
  const requestValueElement = document.querySelector('#request-value');

  // Mendapatkan nilai dari localStorage berdasarkan keyType
  const fetchRequestValue = () => {
    const value = localStorage.getItem(keyType);
    if (value) {
      requestValueElement.textContent = value; // Menampilkan nilai dari localStorage
    } else {
      requestValueElement.textContent = 'N/A'; // Jika data tidak ditemukan
    }
  };

  // Memanggil fungsi untuk mengambil nilai
  fetchRequestValue();
</script>

<style lang="scss">
  .dashboard-widget {
    &.type-success {
      > p:first-child {
        color: var(--success-700);
      }
    }

    &.type-error {
      > p:first-child {
        color: var(--error-700);
      }
    }

    background-color: var(--neutral-100);
    padding: 1.5rem;
    text-align: center;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease-in-out;

    &:hover {
      transform: translateY(-0.5rem);
    }
  }

  :global(.darkmode .dashboard-widget) {
    background-color: var(--neutral-900);

    &.type-success {
      > p:first-child {
        color: var(--success-400);
      }
    }

    &.type-error {
      > p:first-child {
        color: var(--error-400);
      }
    }
  }
</style>
