---
const {
  title = 'Remaining Requests',
  type = 'success'
} = Astro.props
---

<div class="dashboard-widget radius-large space-24 elevation-400 space-content type-${type}">
  <p class="size-48">
    <strong id="remaining-requests">0</strong>
  </p>
  <p class="size-20">
    <em>{title}</em>
  </p>
</div>

<script>
  // Function to fetch remaining requests from API
  async function fetchRemainingRequests() {
    const apikey = localStorage.getItem('apikey'); // Get API key from localStorage

    if (!apikey) {
      console.error('API key not found');
      return;
    }

    try {
      // Fetch remaining requests using the stored API key
      const response = await fetch(`https://api.jkt48connect.my.id/api/check-apikey/${apikey}`);

      // Check if the response is successful
      if (!response.ok) {
        console.error('Failed to fetch from API. Status:', response.status);
        return;
      }

      // Parse the JSON response
      const data = await response.json();

      if (data.success) {
        // If API key is valid, update the widget with the remaining requests
        const widgetNumber = document.getElementById('remaining-requests');
        widgetNumber.textContent = data.remaining_requests || 'N/A'; // Default to 'N/A' if no remaining_requests
      } else {
        console.error('API key is invalid or response error:', data.message);
      }
    } catch (error) {
      console.error('Error fetching remaining requests:', error);
    }
  }

  // Call the function to fetch the remaining requests when the page loads
  window.onload = fetchRemainingRequests;
</script>

<style lang="scss">
  .dashboard-widget {
    &.type-success {
      > p:first-child {
        color: var(--success-700);
      }
    }

    &.type-error {
      > p:first-child {
        color: var(--error-700);
      }
    }

    background-color: var(--neutral-100);
  }

  :global(.darkmode .dashboard-widget) {
    background-color: var(--neutral-900);

    &.type-success {
      > p:first-child {
        color: var(--success-400);
      }
    }

    &.type-error {
      > p:first-child {
        color: var(--error-400);
      }
    }
  }
</style>
